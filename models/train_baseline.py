{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f4d21cc3",
   "metadata": {
    "papermill": {
     "duration": 0.00741,
     "end_time": "2024-06-06T11:44:32.236200",
     "exception": false,
     "start_time": "2024-06-06T11:44:32.228790",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# baselineモデル作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5b593a46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:44:32.251129Z",
     "iopub.status.busy": "2024-06-06T11:44:32.250850Z",
     "iopub.status.idle": "2024-06-06T11:44:32.260882Z",
     "shell.execute_reply": "2024-06-06T11:44:32.260153Z"
    },
    "papermill": {
     "duration": 0.019658,
     "end_time": "2024-06-06T11:44:32.262703",
     "exception": false,
     "start_time": "2024-06-06T11:44:32.243045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# DEBUG_MODE = True\n",
    "DEBUG_MODE = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "116f72ac",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-06T11:44:32.277697Z",
     "iopub.status.busy": "2024-06-06T11:44:32.277428Z",
     "iopub.status.idle": "2024-06-06T11:44:39.946055Z",
     "shell.execute_reply": "2024-06-06T11:44:39.945282Z"
    },
    "papermill": {
     "duration": 7.678689,
     "end_time": "2024-06-06T11:44:39.948336",
     "exception": false,
     "start_time": "2024-06-06T11:44:32.269647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "import subprocess\n",
    "import os\n",
    "import gc\n",
    "from glob import glob\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import polars as pl\n",
    "from datetime import datetime\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "ROOT = '/kaggle/input/home-credit-credit-risk-model-stability'\n",
    "\n",
    "from sklearn.model_selection import TimeSeriesSplit, GroupKFold, StratifiedGroupKFold\n",
    "from sklearn.base import BaseEstimator, RegressorMixin\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import lightgbm as lgb\n",
    "from catboost import CatBoostClassifier, Pool\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import VotingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0638e55f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:44:39.963681Z",
     "iopub.status.busy": "2024-06-06T11:44:39.963408Z",
     "iopub.status.idle": "2024-06-06T11:44:39.968418Z",
     "shell.execute_reply": "2024-06-06T11:44:39.967554Z"
    },
    "papermill": {
     "duration": 0.014755,
     "end_time": "2024-06-06T11:44:39.970258",
     "exception": false,
     "start_time": "2024-06-06T11:44:39.955503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Set a seed for various non-deterministic processes for reproducibility\n",
    "import random\n",
    "def seed_it_all(seed=7):\n",
    "    os.environ['PYTHONHASHSEED'] = str(seed)\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "\n",
    "SEED = 0\n",
    "\n",
    "# set the seed for this run\n",
    "seed_it_all(SEED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "af45c96f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:44:39.985117Z",
     "iopub.status.busy": "2024-06-06T11:44:39.984845Z",
     "iopub.status.idle": "2024-06-06T11:44:40.022349Z",
     "shell.execute_reply": "2024-06-06T11:44:40.021527Z"
    },
    "papermill": {
     "duration": 0.047245,
     "end_time": "2024-06-06T11:44:40.024207",
     "exception": false,
     "start_time": "2024-06-06T11:44:39.976962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Pipeline:\n",
    "\n",
    "    def set_table_dtypes(df):\n",
    "        for col in df.columns:\n",
    "            if col in [\"case_id\", \"WEEK_NUM\", \"num_group1\", \"num_group2\"]:\n",
    "                df = df.with_columns(pl.col(col).cast(pl.Int64))\n",
    "            elif col in [\"date_decision\"]:\n",
    "                df = df.with_columns(pl.col(col).cast(pl.Date))\n",
    "            elif col[-1] in (\"P\", \"A\"):\n",
    "                df = df.with_columns(pl.col(col).cast(pl.Float64))\n",
    "            elif col[-1] in (\"M\",):\n",
    "                df = df.with_columns(pl.col(col).cast(pl.String))\n",
    "            elif col[-1] in (\"D\",):\n",
    "                df = df.with_columns(pl.col(col).cast(pl.Date))\n",
    "        return df\n",
    "\n",
    "    def handle_dates(df):\n",
    "        for col in df.columns:\n",
    "            if col[-1] in (\"D\",):\n",
    "                df = df.with_columns(pl.col(col) - pl.col(\"date_decision\"))  #!!?\n",
    "                df = df.with_columns(pl.col(col).dt.total_days()) # t - t-1\n",
    "        df = df.drop(\"date_decision\", \"MONTH\")\n",
    "        return df\n",
    "\n",
    "    def filter_cols(df):\n",
    "        for col in df.columns:\n",
    "            if col not in [\"target\", \"case_id\", \"WEEK_NUM\"]:\n",
    "                isnull = df[col].is_null().mean()\n",
    "                if isnull > 0.7:\n",
    "                    df = df.drop(col)\n",
    "        \n",
    "        for col in df.columns:\n",
    "            if (col not in [\"target\", \"case_id\", \"WEEK_NUM\"]) & (df[col].dtype == pl.String):\n",
    "                freq = df[col].n_unique()\n",
    "                if (freq == 1) | (freq > 200):\n",
    "                    df = df.drop(col)\n",
    "        \n",
    "        return df\n",
    "\n",
    "\n",
    "class Aggregator:\n",
    "    #Please add or subtract features yourself, be aware that too many features will take up too much space.\n",
    "    def num_expr(df):\n",
    "        cols = [col for col in df.columns if col[-1] in (\"P\", \"A\")]\n",
    "        expr_max = [pl.max(col).alias(f\"max_{col}\") for col in cols]\n",
    "        \n",
    "        expr_last = [pl.last(col).alias(f\"last_{col}\") for col in cols]\n",
    "        #expr_first = [pl.first(col).alias(f\"first_{col}\") for col in cols]\n",
    "        expr_mean = [pl.mean(col).alias(f\"mean_{col}\") for col in cols]\n",
    "        return expr_max +expr_last+expr_mean\n",
    "    \n",
    "    def date_expr(df):\n",
    "        cols = [col for col in df.columns if col[-1] in (\"D\")]\n",
    "        expr_max = [pl.max(col).alias(f\"max_{col}\") for col in cols]\n",
    "        #expr_min = [pl.min(col).alias(f\"min_{col}\") for col in cols]\n",
    "        expr_last = [pl.last(col).alias(f\"last_{col}\") for col in cols]\n",
    "        #expr_first = [pl.first(col).alias(f\"first_{col}\") for col in cols]\n",
    "        expr_mean = [pl.mean(col).alias(f\"mean_{col}\") for col in cols]\n",
    "        return  expr_max +expr_last+expr_mean\n",
    "    \n",
    "    def str_expr(df):\n",
    "        cols = [col for col in df.columns if col[-1] in (\"M\",)]\n",
    "        expr_max = [pl.max(col).alias(f\"max_{col}\") for col in cols]\n",
    "        #expr_min = [pl.min(col).alias(f\"min_{col}\") for col in cols]\n",
    "        expr_last = [pl.last(col).alias(f\"last_{col}\") for col in cols]\n",
    "        #expr_first = [pl.first(col).alias(f\"first_{col}\") for col in cols]\n",
    "        #expr_count = [pl.count(col).alias(f\"count_{col}\") for col in cols]\n",
    "        return  expr_max +expr_last#+expr_count\n",
    "    \n",
    "    def other_expr(df):\n",
    "        cols = [col for col in df.columns if col[-1] in (\"T\", \"L\")]\n",
    "        expr_max = [pl.max(col).alias(f\"max_{col}\") for col in cols]\n",
    "        #expr_min = [pl.min(col).alias(f\"min_{col}\") for col in cols]\n",
    "        expr_last = [pl.last(col).alias(f\"last_{col}\") for col in cols]\n",
    "        #expr_first = [pl.first(col).alias(f\"first_{col}\") for col in cols]\n",
    "        return  expr_max +expr_last\n",
    "    \n",
    "    def count_expr(df):\n",
    "        cols = [col for col in df.columns if \"num_group\" in col]\n",
    "        expr_max = [pl.max(col).alias(f\"max_{col}\") for col in cols] \n",
    "        #expr_min = [pl.min(col).alias(f\"min_{col}\") for col in cols]\n",
    "        expr_last = [pl.last(col).alias(f\"last_{col}\") for col in cols]\n",
    "        #expr_first = [pl.first(col).alias(f\"first_{col}\") for col in cols]\n",
    "        return  expr_max +expr_last\n",
    "    \n",
    "    def get_exprs(df):\n",
    "        exprs = Aggregator.num_expr(df) + \\\n",
    "                Aggregator.date_expr(df) + \\\n",
    "                Aggregator.str_expr(df) + \\\n",
    "                Aggregator.other_expr(df) + \\\n",
    "                Aggregator.count_expr(df)\n",
    "\n",
    "        return exprs\n",
    "\n",
    "def read_file(path, depth=None):\n",
    "    df = pl.read_parquet(path)\n",
    "    df = df.pipe(Pipeline.set_table_dtypes)\n",
    "    if depth in [1,2]:\n",
    "        df = df.group_by(\"case_id\").agg(Aggregator.get_exprs(df)) \n",
    "    return df\n",
    "\n",
    "def read_files(regex_path, depth=None):\n",
    "    chunks = []\n",
    "    \n",
    "    for path in glob(str(regex_path)):\n",
    "        df = pl.read_parquet(path)\n",
    "        df = df.pipe(Pipeline.set_table_dtypes)\n",
    "        if depth in [1, 2]:\n",
    "            df = df.group_by(\"case_id\").agg(Aggregator.get_exprs(df))\n",
    "        chunks.append(df)\n",
    "    \n",
    "    df = pl.concat(chunks, how=\"vertical_relaxed\")\n",
    "    df = df.unique(subset=[\"case_id\"])\n",
    "    return df\n",
    "\n",
    "def feature_eng(df_base, depth_0, depth_1, depth_2):\n",
    "    df_base = (\n",
    "        df_base\n",
    "        .with_columns(\n",
    "            month_decision = pl.col(\"date_decision\").dt.month(),\n",
    "            weekday_decision = pl.col(\"date_decision\").dt.weekday(),\n",
    "        )\n",
    "    )\n",
    "    for i, df in enumerate(depth_0 + depth_1 + depth_2):\n",
    "        df_base = df_base.join(df, how=\"left\", on=\"case_id\", suffix=f\"_{i}\")\n",
    "    df_base = df_base.pipe(Pipeline.handle_dates)\n",
    "    return df_base\n",
    "\n",
    "def to_pandas(df_data, cat_cols=None):\n",
    "    df_data = df_data.to_pandas()\n",
    "    if cat_cols is None:\n",
    "        cat_cols = list(df_data.select_dtypes(\"object\").columns)\n",
    "    df_data[cat_cols] = df_data[cat_cols].astype(\"category\")\n",
    "    return df_data, cat_cols\n",
    "\n",
    "def reduce_mem_usage(df):\n",
    "    \"\"\" iterate through all the columns of a dataframe and modify the data type\n",
    "        to reduce memory usage.        \n",
    "    \"\"\"\n",
    "    start_mem = df.memory_usage().sum() / 1024**2\n",
    "    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n",
    "    \n",
    "    for col in df.columns:\n",
    "        col_type = df[col].dtype\n",
    "        if str(col_type)==\"category\":\n",
    "            continue\n",
    "        \n",
    "        if col_type != object:\n",
    "            c_min = df[col].min()\n",
    "            c_max = df[col].max()\n",
    "            if str(col_type)[:3] == 'int':\n",
    "                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
    "                    df[col] = df[col].astype(np.int8)\n",
    "                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
    "                    df[col] = df[col].astype(np.int16)\n",
    "                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
    "                    df[col] = df[col].astype(np.int32)\n",
    "                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n",
    "                    df[col] = df[col].astype(np.int64)  \n",
    "            else:\n",
    "                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n",
    "                    df[col] = df[col].astype(np.float16)\n",
    "                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
    "                    df[col] = df[col].astype(np.float32)\n",
    "                else:\n",
    "                    df[col] = df[col].astype(np.float64)\n",
    "        else:\n",
    "            continue\n",
    "    end_mem = df.memory_usage().sum() / 1024**2\n",
    "    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n",
    "    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5e8d7d06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:44:40.038767Z",
     "iopub.status.busy": "2024-06-06T11:44:40.038514Z",
     "iopub.status.idle": "2024-06-06T11:44:40.042849Z",
     "shell.execute_reply": "2024-06-06T11:44:40.041840Z"
    },
    "papermill": {
     "duration": 0.01374,
     "end_time": "2024-06-06T11:44:40.044708",
     "exception": false,
     "start_time": "2024-06-06T11:44:40.030968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ROOT            = Path(\"/kaggle/input/home-credit-credit-risk-model-stability\")\n",
    "\n",
    "TRAIN_DIR       = ROOT / \"parquet_files\" / \"train\"\n",
    "TEST_DIR        = ROOT / \"parquet_files\" / \"test\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8d70c77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:44:40.059252Z",
     "iopub.status.busy": "2024-06-06T11:44:40.058977Z",
     "iopub.status.idle": "2024-06-06T11:46:53.606197Z",
     "shell.execute_reply": "2024-06-06T11:46:53.605102Z"
    },
    "papermill": {
     "duration": 133.557276,
     "end_time": "2024-06-06T11:46:53.608672",
     "exception": false,
     "start_time": "2024-06-06T11:44:40.051396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_store = {\n",
    "    \"df_base\": read_file(TRAIN_DIR / \"train_base.parquet\"),\n",
    "    \"depth_0\": [\n",
    "        read_file(TRAIN_DIR / \"train_static_cb_0.parquet\"),\n",
    "        read_files(TRAIN_DIR / \"train_static_0_*.parquet\"),\n",
    "    ],\n",
    "    \"depth_1\": [\n",
    "        read_files(TRAIN_DIR / \"train_applprev_1_*.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_tax_registry_a_1.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_tax_registry_b_1.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_tax_registry_c_1.parquet\", 1),\n",
    "        read_files(TRAIN_DIR / \"train_credit_bureau_a_1_*.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_credit_bureau_b_1.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_other_1.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_person_1.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_deposit_1.parquet\", 1),\n",
    "        read_file(TRAIN_DIR / \"train_debitcard_1.parquet\", 1),\n",
    "    ],\n",
    "    \"depth_2\": [\n",
    "        read_file(TRAIN_DIR / \"train_credit_bureau_b_2.parquet\", 2),\n",
    "        read_files(TRAIN_DIR / \"train_credit_bureau_a_2_*.parquet\", 2),\n",
    "        read_file(TRAIN_DIR / \"train_applprev_2.parquet\", 2),\n",
    "        read_file(TRAIN_DIR / \"train_person_2.parquet\", 2)\n",
    "    ]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4c437eba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:46:53.624687Z",
     "iopub.status.busy": "2024-06-06T11:46:53.623707Z",
     "iopub.status.idle": "2024-06-06T11:47:57.930608Z",
     "shell.execute_reply": "2024-06-06T11:47:57.929552Z"
    },
    "papermill": {
     "duration": 64.316999,
     "end_time": "2024-06-06T11:47:57.932938",
     "exception": false,
     "start_time": "2024-06-06T11:46:53.615939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train data shape:\t (1526659, 861)\n",
      "Memory usage of dataframe is 4322.75 MB\n",
      "Memory usage after optimization is: 1528.81 MB\n",
      "Decreased by 64.6%\n"
     ]
    }
   ],
   "source": [
    "df_train = feature_eng(**data_store)\n",
    "print(\"train data shape:\\t\", df_train.shape)\n",
    "del data_store\n",
    "gc.collect()\n",
    "df_train = df_train.pipe(Pipeline.filter_cols)\n",
    "df_train, cat_cols = to_pandas(df_train)\n",
    "df_train = reduce_mem_usage(df_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ecd0454f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:47:57.950536Z",
     "iopub.status.busy": "2024-06-06T11:47:57.949874Z",
     "iopub.status.idle": "2024-06-06T11:48:32.537898Z",
     "shell.execute_reply": "2024-06-06T11:48:32.537101Z"
    },
    "papermill": {
     "duration": 34.599396,
     "end_time": "2024-06-06T11:48:32.540198",
     "exception": false,
     "start_time": "2024-06-06T11:47:57.940802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train data shape:\t (1526659, 472)\n",
      "Use these ['case_id', 'WEEK_NUM', 'target', 'month_decision', 'weekday_decision', 'credamount_770A', 'applicationcnt_361L', 'applications30d_658L', 'applicationscnt_1086L', 'applicationscnt_464L', 'applicationscnt_867L', 'clientscnt_1022L', 'clientscnt_100L', 'clientscnt_1071L', 'clientscnt_1130L', 'clientscnt_157L', 'clientscnt_257L', 'clientscnt_304L', 'clientscnt_360L', 'clientscnt_493L', 'clientscnt_533L', 'clientscnt_887L', 'clientscnt_946L', 'deferredmnthsnum_166L', 'disbursedcredamount_1113A', 'downpmt_116A', 'homephncnt_628L', 'isbidproduct_1095L', 'mobilephncnt_593L', 'numactivecreds_622L', 'numactivecredschannel_414L', 'numactiverelcontr_750L', 'numcontrs3months_479L', 'numnotactivated_1143L', 'numpmtchanneldd_318L', 'numrejects9m_859L', 'sellerplacecnt_915L', 'max_mainoccupationinc_384A', 'max_birth_259D', 'max_num_group1_9']\n",
      "####### NAN count = 0\n",
      "####### NAN count = 918788\n",
      "Use these ['dateofbirth_337D', 'days180_256L', 'days30_165L', 'days360_512L', 'firstquarter_103L', 'fourthquarter_440L', 'secondquarter_766L', 'thirdquarter_1082L', 'max_debtoutstand_525A', 'max_debtoverdue_47A', 'max_refreshdate_3813885D', 'mean_refreshdate_3813885D']\n",
      "####### NAN count = 140968\n",
      "Use these ['pmtscount_423L', 'pmtssum_45A']\n",
      "####### NAN count = 954021\n",
      "####### NAN count = 806659\n",
      "####### NAN count = 866332\n",
      "####### NAN count = 418178\n",
      "Use these ['amtinstpaidbefduel24m_4187115A', 'numinstlswithdpd5_4187116L']\n",
      "####### NAN count = 561124\n",
      "Use these ['annuitynextmonth_57A', 'currdebt_22A', 'currdebtcredtyperange_828A', 'numinstls_657L', 'totalsettled_863A']\n",
      "####### NAN count = 4\n",
      "Use these ['mindbddpdlast24m_3658935P']\n",
      "####### NAN count = 613202\n",
      "####### NAN count = 948244\n",
      "Use these ['mindbdtollast24m_4525191P']\n",
      "####### NAN count = 972827\n",
      "####### NAN count = 467175\n",
      "Use these ['avginstallast24m_3658937A', 'maxinstallast24m_3658928A']\n",
      "####### NAN count = 624875\n",
      "####### NAN count = 757006\n",
      "####### NAN count = 841181\n",
      "####### NAN count = 1026987\n",
      "####### NAN count = 455190\n",
      "####### NAN count = 460822\n",
      "Use these ['commnoinclast6m_3546845L', 'maxdpdfrom6mto36m_3546853P']\n",
      "####### NAN count = 343375\n",
      "####### NAN count = 833735\n",
      "####### NAN count = 887659\n",
      "Use these ['daysoverduetolerancedd_3976961L', 'numinsttopaygr_769L']\n",
      "####### NAN count = 452594\n",
      "####### NAN count = 977119\n",
      "Use these ['eir_270L']\n",
      "####### NAN count = 190833\n",
      "####### NAN count = 859214\n",
      "####### NAN count = 482103\n",
      "####### NAN count = 453587\n",
      "Use these ['lastapplicationdate_877D', 'mean_creationdate_885D', 'max_num_group1', 'last_num_group1', 'max_num_group2_14', 'last_num_group2_14']\n",
      "####### NAN count = 305137\n",
      "Use these ['lastapprcredamount_781A', 'lastapprdate_640D']\n",
      "####### NAN count = 442041\n",
      "####### NAN count = 977975\n",
      "Use these ['lastrejectcredamount_222A', 'lastrejectdate_50D']\n",
      "####### NAN count = 769046\n",
      "####### NAN count = 511255\n",
      "Use these ['mastercontrelectronic_519L', 'mastercontrexist_109L', 'maxannuity_159A', 'maxdebt4_972A', 'maxdpdlast24m_143P', 'maxdpdlast3m_392P', 'maxdpdtolerance_374P']\n",
      "####### NAN count = 306019\n",
      "####### NAN count = 960953\n",
      "####### NAN count = 705504\n",
      "####### NAN count = 876276\n",
      "####### NAN count = 826000\n",
      "####### NAN count = 829402\n",
      "####### NAN count = 1032856\n",
      "####### NAN count = 766958\n",
      "Use these ['numinstpaidearly_338L', 'numinstpaidearly5d_1087L', 'numinstpaidlate1d_3546852L']\n",
      "####### NAN count = 452593\n",
      "####### NAN count = 455081\n",
      "Use these ['numinstlsallpaid_934L']\n",
      "####### NAN count = 445669\n",
      "Use these ['numinstlswithdpd10_728L', 'numinstlswithoutdpd_562L']\n",
      "####### NAN count = 456495\n",
      "Use these ['numinstpaid_4499208L']\n",
      "####### NAN count = 847191\n",
      "####### NAN count = 446983\n",
      "Use these ['numinstregularpaidest_4493210L', 'numinstpaidearly5dest_4493211L', 'sumoutstandtotalest_4493215A']\n",
      "####### NAN count = 840646\n",
      "####### NAN count = 669186\n",
      "####### NAN count = 455612\n",
      "Use these ['pctinstlsallpaidearl3d_427L', 'pctinstlsallpaidlate1d_3546856L']\n",
      "####### NAN count = 458738\n",
      "####### NAN count = 461362\n",
      "####### NAN count = 459827\n",
      "####### NAN count = 460079\n",
      "####### NAN count = 44954\n",
      "####### NAN count = 78526\n",
      "####### NAN count = 131888\n",
      "####### NAN count = 181122\n",
      "####### NAN count = 223240\n",
      "####### NAN count = 445320\n",
      "####### NAN count = 3\n",
      "Use these ['mean_actualdpd_943P']\n",
      "####### NAN count = 305154\n",
      "Use these ['max_annuity_853A', 'mean_annuity_853A']\n",
      "####### NAN count = 308739\n",
      "Use these ['max_credacc_credlmt_575A', 'max_credamount_590A', 'max_downpmt_134A', 'mean_credacc_credlmt_575A', 'mean_credamount_590A', 'mean_downpmt_134A']\n",
      "####### NAN count = 307441\n",
      "Use these ['max_currdebt_94A', 'mean_currdebt_94A']\n",
      "####### NAN count = 419006\n",
      "Use these ['max_mainoccupationinc_437A', 'mean_mainoccupationinc_437A']\n",
      "####### NAN count = 306361\n",
      "Use these ['mean_maxdpdtolerance_577P']\n",
      "####### NAN count = 450969\n",
      "Use these ['max_outstandingdebt_522A', 'mean_outstandingdebt_522A']\n",
      "####### NAN count = 420383\n",
      "####### NAN count = 307551\n",
      "####### NAN count = 477657\n",
      "####### NAN count = 433335\n",
      "Use these ['last_credamount_590A', 'last_downpmt_134A']\n",
      "####### NAN count = 438219\n",
      "####### NAN count = 824731\n",
      "####### NAN count = 312491\n",
      "####### NAN count = 899665\n",
      "####### NAN count = 827764\n",
      "Use these ['max_approvaldate_319D', 'mean_approvaldate_319D']\n",
      "####### NAN count = 442999\n",
      "Use these ['max_dateactivated_425D', 'mean_dateactivated_425D']\n",
      "####### NAN count = 454678\n",
      "Use these ['max_dtlastpmt_581D', 'mean_dtlastpmt_581D']\n",
      "####### NAN count = 703840\n",
      "Use these ['max_dtlastpmtallstes_3545839D', 'mean_dtlastpmtallstes_3545839D']\n",
      "####### NAN count = 548987\n",
      "Use these ['max_employedfrom_700D']\n",
      "####### NAN count = 559169\n",
      "Use these ['max_firstnonzeroinstldate_307D', 'mean_firstnonzeroinstldate_307D']\n",
      "####### NAN count = 334873\n",
      "####### NAN count = 891021\n",
      "####### NAN count = 305203\n",
      "####### NAN count = 920818\n",
      "####### NAN count = 1016761\n",
      "####### NAN count = 1050001\n",
      "####### NAN count = 485683\n",
      "####### NAN count = 961606\n",
      "####### NAN count = 552766\n",
      "Use these ['max_pmtnum_8L']\n",
      "####### NAN count = 321446\n",
      "Use these ['last_pmtnum_8L']\n",
      "####### NAN count = 482174\n",
      "Use these ['max_pmtamount_36A', 'last_pmtamount_36A', 'max_processingdate_168D', 'last_processingdate_168D', 'max_num_group1_5']\n",
      "####### NAN count = 1044394\n",
      "Use these ['mean_credlmt_230A']\n",
      "####### NAN count = 1036944\n",
      "Use these ['mean_credlmt_935A']\n",
      "####### NAN count = 603001\n",
      "Use these ['mean_pmts_dpd_1073P', 'max_dpdmaxdatemonth_89T', 'max_dpdmaxdateyear_596T']\n",
      "####### NAN count = 263166\n",
      "Use these ['max_pmts_dpd_303P', 'mean_dpdmax_757P', 'max_dpdmaxdatemonth_442T', 'max_dpdmaxdateyear_896T', 'mean_pmts_dpd_303P']\n",
      "####### NAN count = 514070\n",
      "Use these ['mean_instlamount_768A']\n",
      "####### NAN count = 606920\n",
      "Use these ['mean_monthlyinstlamount_332A']\n",
      "####### NAN count = 263233\n",
      "Use these ['max_monthlyinstlamount_674A', 'mean_monthlyinstlamount_674A']\n",
      "####### NAN count = 517511\n",
      "Use these ['mean_outstandingamount_354A']\n",
      "####### NAN count = 545885\n",
      "Use these ['mean_outstandingamount_362A']\n",
      "####### NAN count = 636453\n",
      "Use these ['mean_overdueamount_31A']\n",
      "####### NAN count = 512650\n",
      "Use these ['mean_overdueamount_659A', 'max_numberofoverdueinstls_725L']\n",
      "####### NAN count = 263171\n",
      "Use these ['mean_overdueamountmax2_14A', 'mean_totaloutstanddebtvalue_39A', 'mean_dateofcredend_289D', 'mean_dateofcredstart_739D', 'max_lastupdate_1112D', 'mean_lastupdate_1112D', 'max_numberofcontrsvalue_258L', 'max_numberofoverdueinstlmax_1039L', 'max_overdueamountmaxdatemonth_365T', 'max_overdueamountmaxdateyear_2T', 'mean_pmts_overdue_1140A', 'max_pmts_month_158T', 'max_pmts_year_1139T']\n",
      "####### NAN count = 262653\n",
      "Use these ['mean_overdueamountmax2_398A', 'max_dateofcredend_353D', 'max_dateofcredstart_181D', 'mean_dateofcredend_353D', 'max_numberofoverdueinstlmax_1151L']\n",
      "####### NAN count = 512590\n",
      "Use these ['mean_overdueamountmax_35A', 'max_overdueamountmaxdatemonth_284T', 'max_overdueamountmaxdateyear_994T', 'mean_pmts_overdue_1152A']\n",
      "####### NAN count = 513987\n",
      "Use these ['max_residualamount_488A']\n",
      "####### NAN count = 1039597\n",
      "Use these ['mean_residualamount_856A']\n",
      "####### NAN count = 606900\n",
      "Use these ['max_totalamount_6A', 'mean_totalamount_6A']\n",
      "####### NAN count = 545855\n",
      "Use these ['mean_totalamount_996A']\n",
      "####### NAN count = 636448\n",
      "Use these ['mean_totaldebtoverduevalue_718A', 'mean_totaloutstanddebtvalue_668A', 'max_numberofcontrsvalue_358L']\n",
      "####### NAN count = 297072\n",
      "Use these ['max_dateofrealrepmt_138D', 'mean_dateofrealrepmt_138D']\n",
      "####### NAN count = 512961\n",
      "Use these ['max_lastupdate_388D', 'mean_lastupdate_388D']\n",
      "####### NAN count = 512591\n",
      "Use these ['max_numberofoverdueinstlmaxdat_148D']\n",
      "####### NAN count = 802351\n",
      "Use these ['mean_numberofoverdueinstlmaxdat_641D']\n",
      "####### NAN count = 1012361\n",
      "Use these ['mean_overdueamountmax2date_1002D']\n",
      "####### NAN count = 806653\n",
      "Use these ['max_overdueamountmax2date_1142D']\n",
      "####### NAN count = 1007594\n",
      "####### NAN count = 553734\n",
      "####### NAN count = 822517\n",
      "####### NAN count = 745109\n",
      "####### NAN count = 545898\n",
      "####### NAN count = 636545\n",
      "####### NAN count = 545895\n",
      "####### NAN count = 636544\n",
      "####### NAN count = 512657\n",
      "####### NAN count = 561307\n",
      "####### NAN count = 649082\n",
      "Use these ['last_num_group1_6']\n",
      "####### NAN count = 140386\n",
      "Use these ['last_mainoccupationinc_384A', 'last_birth_259D']\n",
      "####### NAN count = 750301\n",
      "Use these ['max_empl_employedfrom_271D']\n",
      "####### NAN count = 959958\n",
      "Use these ['last_personindex_1023L']\n",
      "####### NAN count = 587206\n",
      "####### NAN count = 772\n",
      "####### NAN count = 262659\n",
      "####### NAN count = 512884\n",
      "Use these ['max_pmts_month_706T', 'max_pmts_year_507T']\n",
      "####### NAN count = 512598\n",
      "Use these ['last_pmts_month_158T', 'last_pmts_year_1139T']\n",
      "####### NAN count = 994041\n",
      "Use these ['last_pmts_month_706T', 'last_pmts_year_507T']\n",
      "####### NAN count = 634357\n",
      "Use these ['max_num_group1_13', 'max_num_group2_13', 'last_num_group2_13']\n",
      "####### NAN count = 141371\n",
      "Use these ['max_num_group1_15', 'max_num_group2_15']\n",
      "####### NAN count = 91554\n",
      "['case_id', 'WEEK_NUM', 'target', 'month_decision', 'weekday_decision', 'credamount_770A', 'applicationcnt_361L', 'applications30d_658L', 'applicationscnt_1086L', 'applicationscnt_464L', 'applicationscnt_867L', 'clientscnt_1022L', 'clientscnt_100L', 'clientscnt_1071L', 'clientscnt_1130L', 'clientscnt_157L', 'clientscnt_257L', 'clientscnt_304L', 'clientscnt_360L', 'clientscnt_493L', 'clientscnt_533L', 'clientscnt_887L', 'clientscnt_946L', 'deferredmnthsnum_166L', 'disbursedcredamount_1113A', 'downpmt_116A', 'homephncnt_628L', 'isbidproduct_1095L', 'mobilephncnt_593L', 'numactivecreds_622L', 'numactivecredschannel_414L', 'numactiverelcontr_750L', 'numcontrs3months_479L', 'numnotactivated_1143L', 'numpmtchanneldd_318L', 'numrejects9m_859L', 'sellerplacecnt_915L', 'max_mainoccupationinc_384A', 'max_birth_259D', 'max_num_group1_9', 'birthdate_574D', 'dateofbirth_337D', 'days180_256L', 'days30_165L', 'days360_512L', 'firstquarter_103L', 'fourthquarter_440L', 'secondquarter_766L', 'thirdquarter_1082L', 'max_debtoutstand_525A', 'max_debtoverdue_47A', 'max_refreshdate_3813885D', 'mean_refreshdate_3813885D', 'pmtscount_423L', 'pmtssum_45A', 'responsedate_1012D', 'responsedate_4527233D', 'actualdpdtolerance_344P', 'amtinstpaidbefduel24m_4187115A', 'numinstlswithdpd5_4187116L', 'annuitynextmonth_57A', 'currdebt_22A', 'currdebtcredtyperange_828A', 'numinstls_657L', 'totalsettled_863A', 'mindbddpdlast24m_3658935P', 'avgdbddpdlast3m_4187120P', 'mindbdtollast24m_4525191P', 'avgdpdtolclosure24_3658938P', 'avginstallast24m_3658937A', 'maxinstallast24m_3658928A', 'avgmaxdpdlast9m_3716943P', 'avgoutstandbalancel6m_4187114A', 'avgpmtlast12m_4525200A', 'cntincpaycont9m_3716944L', 'cntpmts24_3658933L', 'commnoinclast6m_3546845L', 'maxdpdfrom6mto36m_3546853P', 'datefirstoffer_1144D', 'datelastunpaid_3546854D', 'daysoverduetolerancedd_3976961L', 'numinsttopaygr_769L', 'dtlastpmtallstes_4499206D', 'eir_270L', 'firstclxcampaign_1125D', 'firstdatedue_489D', 'lastactivateddate_801D', 'lastapplicationdate_877D', 'mean_creationdate_885D', 'max_num_group1', 'last_num_group1', 'max_num_group2_14', 'last_num_group2_14', 'lastapprcredamount_781A', 'lastapprdate_640D', 'lastdelinqdate_224D', 'lastrejectcredamount_222A', 'lastrejectdate_50D', 'maininc_215A', 'mastercontrelectronic_519L', 'mastercontrexist_109L', 'maxannuity_159A', 'maxdebt4_972A', 'maxdpdlast24m_143P', 'maxdpdlast3m_392P', 'maxdpdtolerance_374P', 'maxdbddpdlast1m_3658939P', 'maxdbddpdtollast12m_3658940P', 'maxdbddpdtollast6m_4187119P', 'maxdpdinstldate_3546855D', 'maxdpdinstlnum_3546846P', 'maxlnamtstart6m_4525199A', 'maxoutstandbalancel12m_4187113A', 'numinstpaidearly_338L', 'numinstpaidearly5d_1087L', 'numinstpaidlate1d_3546852L', 'numincomingpmts_3546848L', 'numinstlsallpaid_934L', 'numinstlswithdpd10_728L', 'numinstlswithoutdpd_562L', 'numinstpaid_4499208L', 'numinstpaidearly3d_3546850L', 'numinstregularpaidest_4493210L', 'numinstpaidearly5dest_4493211L', 'sumoutstandtotalest_4493215A', 'numinstpaidlastcontr_4325080L', 'numinstregularpaid_973L', 'pctinstlsallpaidearl3d_427L', 'pctinstlsallpaidlate1d_3546856L', 'pctinstlsallpaidlat10d_839L', 'pctinstlsallpaidlate4d_3546849L', 'pctinstlsallpaidlate6d_3546844L', 'pmtnum_254L', 'posfpd10lastmonth_333P', 'posfpd30lastmonth_3976960P', 'posfstqpd30lastmonth_3976962P', 'price_1097A', 'sumoutstandtotal_3546847A', 'totaldebt_9A', 'mean_actualdpd_943P', 'max_annuity_853A', 'mean_annuity_853A', 'max_credacc_credlmt_575A', 'max_credamount_590A', 'max_downpmt_134A', 'mean_credacc_credlmt_575A', 'mean_credamount_590A', 'mean_downpmt_134A', 'max_currdebt_94A', 'mean_currdebt_94A', 'max_mainoccupationinc_437A', 'mean_mainoccupationinc_437A', 'mean_maxdpdtolerance_577P', 'max_outstandingdebt_522A', 'mean_outstandingdebt_522A', 'last_actualdpd_943P', 'last_annuity_853A', 'last_credacc_credlmt_575A', 'last_credamount_590A', 'last_downpmt_134A', 'last_currdebt_94A', 'last_mainoccupationinc_437A', 'last_maxdpdtolerance_577P', 'last_outstandingdebt_522A', 'max_approvaldate_319D', 'mean_approvaldate_319D', 'max_dateactivated_425D', 'mean_dateactivated_425D', 'max_dtlastpmt_581D', 'mean_dtlastpmt_581D', 'max_dtlastpmtallstes_3545839D', 'mean_dtlastpmtallstes_3545839D', 'max_employedfrom_700D', 'max_firstnonzeroinstldate_307D', 'mean_firstnonzeroinstldate_307D', 'last_approvaldate_319D', 'last_creationdate_885D', 'last_dateactivated_425D', 'last_dtlastpmtallstes_3545839D', 'last_employedfrom_700D', 'last_firstnonzeroinstldate_307D', 'max_byoccupationinc_3656910L', 'max_childnum_21L', 'max_pmtnum_8L', 'last_pmtnum_8L', 'max_pmtamount_36A', 'last_pmtamount_36A', 'max_processingdate_168D', 'last_processingdate_168D', 'max_num_group1_5', 'mean_credlmt_230A', 'mean_credlmt_935A', 'mean_pmts_dpd_1073P', 'max_dpdmaxdatemonth_89T', 'max_dpdmaxdateyear_596T', 'max_pmts_dpd_303P', 'mean_dpdmax_757P', 'max_dpdmaxdatemonth_442T', 'max_dpdmaxdateyear_896T', 'mean_pmts_dpd_303P', 'mean_instlamount_768A', 'mean_monthlyinstlamount_332A', 'max_monthlyinstlamount_674A', 'mean_monthlyinstlamount_674A', 'mean_outstandingamount_354A', 'mean_outstandingamount_362A', 'mean_overdueamount_31A', 'mean_overdueamount_659A', 'max_numberofoverdueinstls_725L', 'mean_overdueamountmax2_14A', 'mean_totaloutstanddebtvalue_39A', 'mean_dateofcredend_289D', 'mean_dateofcredstart_739D', 'max_lastupdate_1112D', 'mean_lastupdate_1112D', 'max_numberofcontrsvalue_258L', 'max_numberofoverdueinstlmax_1039L', 'max_overdueamountmaxdatemonth_365T', 'max_overdueamountmaxdateyear_2T', 'mean_pmts_overdue_1140A', 'max_pmts_month_158T', 'max_pmts_year_1139T', 'mean_overdueamountmax2_398A', 'max_dateofcredend_353D', 'max_dateofcredstart_181D', 'mean_dateofcredend_353D', 'max_numberofoverdueinstlmax_1151L', 'mean_overdueamountmax_35A', 'max_overdueamountmaxdatemonth_284T', 'max_overdueamountmaxdateyear_994T', 'mean_pmts_overdue_1152A', 'max_residualamount_488A', 'mean_residualamount_856A', 'max_totalamount_6A', 'mean_totalamount_6A', 'mean_totalamount_996A', 'mean_totaldebtoverduevalue_718A', 'mean_totaloutstanddebtvalue_668A', 'max_numberofcontrsvalue_358L', 'max_dateofrealrepmt_138D', 'mean_dateofrealrepmt_138D', 'max_lastupdate_388D', 'mean_lastupdate_388D', 'max_numberofoverdueinstlmaxdat_148D', 'mean_numberofoverdueinstlmaxdat_641D', 'mean_overdueamountmax2date_1002D', 'max_overdueamountmax2date_1142D', 'last_refreshdate_3813885D', 'max_nominalrate_281L', 'max_nominalrate_498L', 'max_numberofinstls_229L', 'max_numberofinstls_320L', 'max_numberofoutstandinstls_520L', 'max_numberofoutstandinstls_59L', 'max_numberofoverdueinstls_834L', 'max_periodicityofpmts_1102L', 'max_periodicityofpmts_837L', 'last_num_group1_6', 'last_mainoccupationinc_384A', 'last_birth_259D', 'max_empl_employedfrom_271D', 'last_personindex_1023L', 'last_persontype_1072L', 'max_collater_valueofguarantee_1124L', 'max_collater_valueofguarantee_876L', 'max_pmts_month_706T', 'max_pmts_year_507T', 'last_pmts_month_158T', 'last_pmts_year_1139T', 'last_pmts_month_706T', 'last_pmts_year_507T', 'max_num_group1_13', 'max_num_group2_13', 'last_num_group2_13', 'max_num_group1_15', 'max_num_group2_15']\n",
      "276\n",
      "389\n"
     ]
    }
   ],
   "source": [
    "# DEBUGモードの場合、データの件数を制限\n",
    "if DEBUG_MODE:\n",
    "    df_train = df_train.iloc[:5000]\n",
    "    \n",
    "print(\"train data shape:\\t\", df_train.shape)\n",
    "nums=df_train.select_dtypes(exclude='category').columns\n",
    "from itertools import combinations, permutations\n",
    "#df_train=df_train[nums]\n",
    "nans_df = df_train[nums].isna()\n",
    "nans_groups={}\n",
    "for col in nums:\n",
    "    cur_group = nans_df[col].sum()\n",
    "    try:\n",
    "        nans_groups[cur_group].append(col)\n",
    "    except:\n",
    "        nans_groups[cur_group]=[col]\n",
    "del nans_df; x=gc.collect()\n",
    "\n",
    "def reduce_group(grps):\n",
    "    use = []\n",
    "    for g in grps:\n",
    "        mx = 0; vx = g[0]\n",
    "        for gg in g:\n",
    "            n = df_train[gg].nunique()\n",
    "            if n>mx:\n",
    "                mx = n\n",
    "                vx = gg\n",
    "            #print(str(gg)+'-'+str(n),', ',end='')\n",
    "        use.append(vx)\n",
    "        #print()\n",
    "    print('Use these',use)\n",
    "    return use\n",
    "\n",
    "def group_columns_by_correlation(matrix, threshold=0.8):\n",
    "    # 计算列之间的相关性\n",
    "    correlation_matrix = matrix.corr()\n",
    "\n",
    "    # 分组列\n",
    "    groups = []\n",
    "    remaining_cols = list(matrix.columns)\n",
    "    while remaining_cols:\n",
    "        col = remaining_cols.pop(0)\n",
    "        group = [col]\n",
    "        correlated_cols = [col]\n",
    "        for c in remaining_cols:\n",
    "            if correlation_matrix.loc[col, c] >= threshold:\n",
    "                group.append(c)\n",
    "                correlated_cols.append(c)\n",
    "        groups.append(group)\n",
    "        remaining_cols = [c for c in remaining_cols if c not in correlated_cols]\n",
    "    \n",
    "    return groups\n",
    "\n",
    "uses=[]\n",
    "for k,v in nans_groups.items():\n",
    "    if len(v)>1:\n",
    "            Vs = nans_groups[k]\n",
    "            #cross_features=list(combinations(Vs, 2))\n",
    "            #make_corr(Vs)\n",
    "            grps= group_columns_by_correlation(df_train[Vs], threshold=0.8)\n",
    "            use=reduce_group(grps)\n",
    "            uses=uses+use\n",
    "            #make_corr(use)\n",
    "    else:\n",
    "        uses=uses+v\n",
    "    print('####### NAN count =',k)\n",
    "print(uses)\n",
    "print(len(uses))\n",
    "uses=uses+list(df_train.select_dtypes(include='category').columns)\n",
    "\n",
    "# WEEK_NUMが除外されてたら追加する\n",
    "if 'WEEK_NUM' not in uses:\n",
    "    uses.append('WEEK_NUM')\n",
    "    \n",
    "print(len(uses))\n",
    "df_train=df_train[uses]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1fa35991",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:32.561724Z",
     "iopub.status.busy": "2024-06-06T11:48:32.561054Z",
     "iopub.status.idle": "2024-06-06T11:48:32.569267Z",
     "shell.execute_reply": "2024-06-06T11:48:32.568515Z"
    },
    "papermill": {
     "duration": 0.020809,
     "end_time": "2024-06-06T11:48:32.571217",
     "exception": false,
     "start_time": "2024-06-06T11:48:32.550408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['train_columns.pkl']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 訓練データのカラム情報を出力\n",
    "import joblib\n",
    "joblib.dump((df_train.columns, cat_cols), \"train_columns.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "78d63957",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:32.592051Z",
     "iopub.status.busy": "2024-06-06T11:48:32.591817Z",
     "iopub.status.idle": "2024-06-06T11:48:32.595435Z",
     "shell.execute_reply": "2024-06-06T11:48:32.594660Z"
    },
    "papermill": {
     "duration": 0.016306,
     "end_time": "2024-06-06T11:48:32.597381",
     "exception": false,
     "start_time": "2024-06-06T11:48:32.581075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sample = pd.read_csv(\"/kaggle/input/home-credit-credit-risk-model-stability/sample_submission.csv\")\n",
    "# device='gpu'\n",
    "# n_est=6000\n",
    "# DRY_RUN = True if sample.shape[0] == 10 else False   \n",
    "# if DRY_RUN:\n",
    "#     device='cpu'\n",
    "#     df_train = df_train.iloc[:50000]\n",
    "#     n_est=600"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fbab556d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:32.618202Z",
     "iopub.status.busy": "2024-06-06T11:48:32.617953Z",
     "iopub.status.idle": "2024-06-06T11:48:32.980529Z",
     "shell.execute_reply": "2024-06-06T11:48:32.979653Z"
    },
    "papermill": {
     "duration": 0.375443,
     "end_time": "2024-06-06T11:48:32.982628",
     "exception": false,
     "start_time": "2024-06-06T11:48:32.607185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_store = {\n",
    "    \"df_base\": read_file(TEST_DIR / \"test_base.parquet\"),\n",
    "    \"depth_0\": [\n",
    "        read_file(TEST_DIR / \"test_static_cb_0.parquet\"),\n",
    "        read_files(TEST_DIR / \"test_static_0_*.parquet\"),\n",
    "    ],\n",
    "    \"depth_1\": [\n",
    "        read_files(TEST_DIR / \"test_applprev_1_*.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_tax_registry_a_1.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_tax_registry_b_1.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_tax_registry_c_1.parquet\", 1),\n",
    "        read_files(TEST_DIR / \"test_credit_bureau_a_1_*.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_credit_bureau_b_1.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_other_1.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_person_1.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_deposit_1.parquet\", 1),\n",
    "        read_file(TEST_DIR / \"test_debitcard_1.parquet\", 1),\n",
    "    ],\n",
    "    \"depth_2\": [\n",
    "        read_file(TEST_DIR / \"test_credit_bureau_b_2.parquet\", 2),\n",
    "        read_files(TEST_DIR / \"test_credit_bureau_a_2_*.parquet\", 2),\n",
    "        read_file(TEST_DIR / \"test_applprev_2.parquet\", 2),\n",
    "        read_file(TEST_DIR / \"test_person_2.parquet\", 2)\n",
    "    ]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "89efc496",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:33.004660Z",
     "iopub.status.busy": "2024-06-06T11:48:33.004395Z",
     "iopub.status.idle": "2024-06-06T11:48:33.501494Z",
     "shell.execute_reply": "2024-06-06T11:48:33.500542Z"
    },
    "papermill": {
     "duration": 0.510965,
     "end_time": "2024-06-06T11:48:33.503563",
     "exception": false,
     "start_time": "2024-06-06T11:48:32.992598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test data shape:\t (10, 860)\n",
      "train data shape:\t (1526659, 389)\n",
      "test data shape:\t (10, 388)\n",
      "Memory usage of dataframe is 0.04 MB\n",
      "Memory usage after optimization is: 0.02 MB\n",
      "Decreased by 40.3%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test = feature_eng(**data_store)\n",
    "print(\"test data shape:\\t\", df_test.shape)\n",
    "del data_store\n",
    "gc.collect()\n",
    "df_test = df_test.select([col for col in df_train.columns if col != \"target\"])\n",
    "print(\"train data shape:\\t\", df_train.shape)\n",
    "print(\"test data shape:\\t\", df_test.shape)\n",
    "\n",
    "df_test, cat_cols = to_pandas(df_test, cat_cols)\n",
    "df_test = reduce_mem_usage(df_test)\n",
    "\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9ac55d8",
   "metadata": {
    "papermill": {
     "duration": 0.010153,
     "end_time": "2024-06-06T11:48:33.524182",
     "exception": false,
     "start_time": "2024-06-06T11:48:33.514029",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d4efc465",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:33.546227Z",
     "iopub.status.busy": "2024-06-06T11:48:33.545938Z",
     "iopub.status.idle": "2024-06-06T11:48:34.777725Z",
     "shell.execute_reply": "2024-06-06T11:48:34.776941Z"
    },
    "papermill": {
     "duration": 1.245553,
     "end_time": "2024-06-06T11:48:34.780051",
     "exception": false,
     "start_time": "2024-06-06T11:48:33.534498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y = df_train[\"target\"]\n",
    "weeks = df_train[\"WEEK_NUM\"]\n",
    "df_train= df_train.drop(columns=[\"target\", \"case_id\", \"WEEK_NUM\"])\n",
    "cv = StratifiedGroupKFold(n_splits=5, shuffle=True, random_state=SEED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "17e205eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:34.801871Z",
     "iopub.status.busy": "2024-06-06T11:48:34.801597Z",
     "iopub.status.idle": "2024-06-06T11:48:44.463765Z",
     "shell.execute_reply": "2024-06-06T11:48:44.462737Z"
    },
    "papermill": {
     "duration": 9.67567,
     "end_time": "2024-06-06T11:48:44.466266",
     "exception": false,
     "start_time": "2024-06-06T11:48:34.790596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train[cat_cols] = df_train[cat_cols].astype(str)\n",
    "df_test[cat_cols] = df_test[cat_cols].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28b82469",
   "metadata": {
    "papermill": {
     "duration": 0.009906,
     "end_time": "2024-06-06T11:48:44.487514",
     "exception": false,
     "start_time": "2024-06-06T11:48:44.477608",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 学習"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2679000a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:44.508644Z",
     "iopub.status.busy": "2024-06-06T11:48:44.508370Z",
     "iopub.status.idle": "2024-06-06T11:48:44.512558Z",
     "shell.execute_reply": "2024-06-06T11:48:44.511712Z"
    },
    "papermill": {
     "duration": 0.016893,
     "end_time": "2024-06-06T11:48:44.514354",
     "exception": false,
     "start_time": "2024-06-06T11:48:44.497461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if DEBUG_MODE:\n",
    "    task_type='CPU'\n",
    "    device='cpu'\n",
    "    n_est=100\n",
    "else:\n",
    "    task_type='GPU'\n",
    "    device='gpu'\n",
    "    n_est=6000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9281895b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:44.535657Z",
     "iopub.status.busy": "2024-06-06T11:48:44.535410Z",
     "iopub.status.idle": "2024-06-06T11:48:44.540247Z",
     "shell.execute_reply": "2024-06-06T11:48:44.539437Z"
    },
    "papermill": {
     "duration": 0.017903,
     "end_time": "2024-06-06T11:48:44.542343",
     "exception": false,
     "start_time": "2024-06-06T11:48:44.524440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# LGBMはアルゴリズムが異なる2つのモデルを学習\n",
    "params_lgb = {\n",
    "    \"boosting_type\": \"gbdt\",\n",
    "    \"objective\": \"binary\",\n",
    "    \"metric\": \"auc\",\n",
    "    \"max_depth\": 10,  \n",
    "    \"learning_rate\": 0.05,\n",
    "    \"n_estimators\": 2500,  \n",
    "    \"colsample_bytree\": 0.8,\n",
    "    \"colsample_bynode\": 0.8,\n",
    "    \"verbose\": -1,\n",
    "    \"random_state\": SEED,\n",
    "    \"reg_alpha\": 0.1,\n",
    "    \"reg_lambda\": 10,\n",
    "    \"extra_trees\":True,\n",
    "    'num_leaves':64,\n",
    "    \"device\": device, \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0c458561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:44.563705Z",
     "iopub.status.busy": "2024-06-06T11:48:44.563441Z",
     "iopub.status.idle": "2024-06-06T11:48:44.568244Z",
     "shell.execute_reply": "2024-06-06T11:48:44.567444Z"
    },
    "papermill": {
     "duration": 0.017743,
     "end_time": "2024-06-06T11:48:44.570085",
     "exception": false,
     "start_time": "2024-06-06T11:48:44.552342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "params_lgb2 = {\n",
    "    \"boosting_type\": \"goss\",\n",
    "    \"objective\": \"binary\",\n",
    "    \"metric\": \"auc\",\n",
    "    \"max_depth\": 10,  \n",
    "    \"learning_rate\": 0.05,\n",
    "    \"n_estimators\": 2500,  \n",
    "    \"colsample_bytree\": 0.8,\n",
    "    \"colsample_bynode\": 0.8,\n",
    "    \"verbose\": -1,\n",
    "    \"random_state\": SEED,\n",
    "    \"reg_alpha\": 0.1,\n",
    "    \"reg_lambda\": 10,\n",
    "    \"extra_trees\":True,\n",
    "    'num_leaves':64,\n",
    "    \"device\": device, \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "18e9bba0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T11:48:44.591807Z",
     "iopub.status.busy": "2024-06-06T11:48:44.591532Z",
     "iopub.status.idle": "2024-06-06T21:49:34.433320Z",
     "shell.execute_reply": "2024-06-06T21:49:34.432089Z"
    },
    "papermill": {
     "duration": 36049.855385,
     "end_time": "2024-06-06T21:49:34.435812",
     "exception": false,
     "start_time": "2024-06-06T11:48:44.580427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Default metric period is 5 because AUC is/are not implemented for GPU\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6544184\tbest: 0.6544184 (0)\ttotal: 907ms\tremaining: 1h 30m 39s\n",
      "300:\ttest: 0.8419874\tbest: 0.8419874 (300)\ttotal: 3m 25s\tremaining: 1h 4m 58s\n",
      "600:\ttest: 0.8469312\tbest: 0.8469312 (600)\ttotal: 6m 43s\tremaining: 1h 27s\n",
      "900:\ttest: 0.8489668\tbest: 0.8489668 (900)\ttotal: 9m 55s\tremaining: 56m 12s\n",
      "1200:\ttest: 0.8501575\tbest: 0.8501575 (1200)\ttotal: 13m 7s\tremaining: 52m 25s\n",
      "1500:\ttest: 0.8511682\tbest: 0.8511682 (1500)\ttotal: 16m 20s\tremaining: 48m 59s\n",
      "1800:\ttest: 0.8520383\tbest: 0.8520383 (1800)\ttotal: 19m 33s\tremaining: 45m 36s\n",
      "2100:\ttest: 0.8526887\tbest: 0.8526887 (2100)\ttotal: 22m 45s\tremaining: 42m 13s\n",
      "2400:\ttest: 0.8532876\tbest: 0.8532876 (2400)\ttotal: 25m 56s\tremaining: 38m 52s\n",
      "2700:\ttest: 0.8537667\tbest: 0.8537705 (2690)\ttotal: 29m 6s\tremaining: 35m 33s\n",
      "3000:\ttest: 0.8541803\tbest: 0.8541803 (3000)\ttotal: 32m 17s\tremaining: 32m 16s\n",
      "3300:\ttest: 0.8545630\tbest: 0.8545630 (3300)\ttotal: 35m 30s\tremaining: 29m 1s\n",
      "3600:\ttest: 0.8548473\tbest: 0.8548473 (3600)\ttotal: 38m 41s\tremaining: 25m 46s\n",
      "3900:\ttest: 0.8551023\tbest: 0.8551041 (3895)\ttotal: 41m 53s\tremaining: 22m 32s\n",
      "4200:\ttest: 0.8554146\tbest: 0.8554146 (4200)\ttotal: 45m 5s\tremaining: 19m 18s\n",
      "4500:\ttest: 0.8556187\tbest: 0.8556187 (4500)\ttotal: 48m 16s\tremaining: 16m 4s\n",
      "4800:\ttest: 0.8558839\tbest: 0.8558839 (4800)\ttotal: 51m 30s\tremaining: 12m 51s\n",
      "5100:\ttest: 0.8560764\tbest: 0.8560787 (5090)\ttotal: 54m 44s\tremaining: 9m 38s\n",
      "5400:\ttest: 0.8562483\tbest: 0.8562483 (5400)\ttotal: 57m 58s\tremaining: 6m 25s\n",
      "5700:\ttest: 0.8564159\tbest: 0.8564159 (5700)\ttotal: 1h 1m 12s\tremaining: 3m 12s\n",
      "5999:\ttest: 0.8565988\tbest: 0.8565988 (5999)\ttotal: 1h 4m 23s\tremaining: 0us\n",
      "bestTest = 0.8565988243\n",
      "bestIteration = 5999\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n",
      "1 warning generated.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.852943\n",
      "[400]\tvalid_0's auc: 0.857594\n",
      "[600]\tvalid_0's auc: 0.859226\n",
      "[800]\tvalid_0's auc: 0.859864\n",
      "Early stopping, best iteration is:\n",
      "[921]\tvalid_0's auc: 0.860126\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.853322\n",
      "[400]\tvalid_0's auc: 0.857708\n",
      "[600]\tvalid_0's auc: 0.859119\n",
      "[800]\tvalid_0's auc: 0.859711\n",
      "[1000]\tvalid_0's auc: 0.859884\n",
      "Early stopping, best iteration is:\n",
      "[989]\tvalid_0's auc: 0.859925\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Default metric period is 5 because AUC is/are not implemented for GPU\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6566736\tbest: 0.6566736 (0)\ttotal: 740ms\tremaining: 1h 13m 58s\n",
      "300:\ttest: 0.8409487\tbest: 0.8409487 (300)\ttotal: 3m 33s\tremaining: 1h 7m 19s\n",
      "600:\ttest: 0.8452904\tbest: 0.8452904 (600)\ttotal: 6m 56s\tremaining: 1h 2m 18s\n",
      "900:\ttest: 0.8472021\tbest: 0.8472021 (900)\ttotal: 10m 15s\tremaining: 58m 3s\n",
      "1200:\ttest: 0.8485450\tbest: 0.8485450 (1200)\ttotal: 13m 33s\tremaining: 54m 10s\n",
      "1500:\ttest: 0.8495954\tbest: 0.8495954 (1500)\ttotal: 16m 51s\tremaining: 50m 31s\n",
      "1800:\ttest: 0.8504598\tbest: 0.8504598 (1800)\ttotal: 20m 8s\tremaining: 46m 56s\n",
      "2100:\ttest: 0.8509825\tbest: 0.8509825 (2100)\ttotal: 23m 26s\tremaining: 43m 29s\n",
      "2400:\ttest: 0.8515363\tbest: 0.8515363 (2400)\ttotal: 26m 44s\tremaining: 40m 5s\n",
      "2700:\ttest: 0.8520482\tbest: 0.8520482 (2700)\ttotal: 30m 2s\tremaining: 36m 42s\n",
      "3000:\ttest: 0.8523875\tbest: 0.8523875 (3000)\ttotal: 33m 21s\tremaining: 33m 20s\n",
      "3300:\ttest: 0.8527707\tbest: 0.8527707 (3300)\ttotal: 36m 42s\tremaining: 30m\n",
      "3600:\ttest: 0.8529323\tbest: 0.8529392 (3590)\ttotal: 40m 2s\tremaining: 26m 40s\n",
      "3900:\ttest: 0.8531676\tbest: 0.8531676 (3900)\ttotal: 43m 21s\tremaining: 23m 19s\n",
      "4200:\ttest: 0.8534447\tbest: 0.8534447 (4200)\ttotal: 46m 40s\tremaining: 19m 59s\n",
      "4500:\ttest: 0.8535773\tbest: 0.8535873 (4495)\ttotal: 49m 58s\tremaining: 16m 38s\n",
      "4800:\ttest: 0.8537493\tbest: 0.8537528 (4795)\ttotal: 53m 17s\tremaining: 13m 18s\n",
      "5100:\ttest: 0.8539024\tbest: 0.8539087 (5095)\ttotal: 56m 36s\tremaining: 9m 58s\n",
      "5400:\ttest: 0.8540603\tbest: 0.8540642 (5380)\ttotal: 59m 54s\tremaining: 6m 38s\n",
      "5700:\ttest: 0.8541928\tbest: 0.8541928 (5700)\ttotal: 1h 3m 14s\tremaining: 3m 18s\n",
      "5999:\ttest: 0.8543222\tbest: 0.8543243 (5975)\ttotal: 1h 6m 32s\tremaining: 0us\n",
      "bestTest = 0.8543242812\n",
      "bestIteration = 5975\n",
      "Shrink model to first 5976 iterations.\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.851252\n",
      "[400]\tvalid_0's auc: 0.855482\n",
      "[600]\tvalid_0's auc: 0.857022\n",
      "[800]\tvalid_0's auc: 0.857726\n",
      "[1000]\tvalid_0's auc: 0.857958\n",
      "Early stopping, best iteration is:\n",
      "[962]\tvalid_0's auc: 0.858029\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.850498\n",
      "[400]\tvalid_0's auc: 0.855202\n",
      "[600]\tvalid_0's auc: 0.856735\n",
      "[800]\tvalid_0's auc: 0.857428\n",
      "[1000]\tvalid_0's auc: 0.857852\n",
      "Early stopping, best iteration is:\n",
      "[1012]\tvalid_0's auc: 0.857912\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Default metric period is 5 because AUC is/are not implemented for GPU\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6521416\tbest: 0.6521416 (0)\ttotal: 739ms\tremaining: 1h 13m 52s\n",
      "300:\ttest: 0.8309740\tbest: 0.8309740 (300)\ttotal: 3m 34s\tremaining: 1h 7m 44s\n",
      "600:\ttest: 0.8355850\tbest: 0.8355850 (600)\ttotal: 6m 57s\tremaining: 1h 2m 26s\n",
      "900:\ttest: 0.8376152\tbest: 0.8376166 (895)\ttotal: 10m 16s\tremaining: 58m 10s\n",
      "1200:\ttest: 0.8390705\tbest: 0.8390705 (1200)\ttotal: 13m 34s\tremaining: 54m 12s\n",
      "1500:\ttest: 0.8400585\tbest: 0.8400596 (1495)\ttotal: 16m 55s\tremaining: 50m 42s\n",
      "1800:\ttest: 0.8407954\tbest: 0.8407954 (1800)\ttotal: 20m 12s\tremaining: 47m 7s\n",
      "2100:\ttest: 0.8413050\tbest: 0.8413050 (2100)\ttotal: 23m 29s\tremaining: 43m 36s\n",
      "2400:\ttest: 0.8418769\tbest: 0.8418769 (2400)\ttotal: 26m 49s\tremaining: 40m 12s\n",
      "2700:\ttest: 0.8422408\tbest: 0.8422434 (2675)\ttotal: 30m 6s\tremaining: 36m 46s\n",
      "3000:\ttest: 0.8426340\tbest: 0.8426340 (3000)\ttotal: 33m 23s\tremaining: 33m 21s\n",
      "3300:\ttest: 0.8429817\tbest: 0.8429817 (3300)\ttotal: 36m 43s\tremaining: 30m 1s\n",
      "3600:\ttest: 0.8433884\tbest: 0.8433884 (3600)\ttotal: 40m 1s\tremaining: 26m 40s\n",
      "3900:\ttest: 0.8437604\tbest: 0.8437712 (3890)\ttotal: 43m 21s\tremaining: 23m 20s\n",
      "4200:\ttest: 0.8440235\tbest: 0.8440235 (4200)\ttotal: 46m 41s\tremaining: 19m 59s\n",
      "4500:\ttest: 0.8443150\tbest: 0.8443150 (4500)\ttotal: 50m\tremaining: 16m 39s\n",
      "4800:\ttest: 0.8444859\tbest: 0.8444975 (4785)\ttotal: 53m 21s\tremaining: 13m 19s\n",
      "5100:\ttest: 0.8446675\tbest: 0.8446675 (5100)\ttotal: 56m 41s\tremaining: 9m 59s\n",
      "5400:\ttest: 0.8448443\tbest: 0.8448443 (5400)\ttotal: 1h\tremaining: 6m 39s\n",
      "5700:\ttest: 0.8450183\tbest: 0.8450266 (5670)\ttotal: 1h 3m 21s\tremaining: 3m 19s\n",
      "5999:\ttest: 0.8452196\tbest: 0.8452196 (5999)\ttotal: 1h 6m 41s\tremaining: 0us\n",
      "bestTest = 0.8452195525\n",
      "bestIteration = 5999\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.842321\n",
      "[400]\tvalid_0's auc: 0.846784\n",
      "[600]\tvalid_0's auc: 0.848314\n",
      "[800]\tvalid_0's auc: 0.848818\n",
      "[1000]\tvalid_0's auc: 0.849029\n",
      "Early stopping, best iteration is:\n",
      "[987]\tvalid_0's auc: 0.849073\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.842098\n",
      "[400]\tvalid_0's auc: 0.846883\n",
      "[600]\tvalid_0's auc: 0.84827\n",
      "[800]\tvalid_0's auc: 0.848993\n",
      "[1000]\tvalid_0's auc: 0.849304\n",
      "[1200]\tvalid_0's auc: 0.849442\n",
      "Early stopping, best iteration is:\n",
      "[1144]\tvalid_0's auc: 0.849517\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Default metric period is 5 because AUC is/are not implemented for GPU\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6557831\tbest: 0.6557831 (0)\ttotal: 759ms\tremaining: 1h 15m 52s\n",
      "300:\ttest: 0.8388263\tbest: 0.8388263 (300)\ttotal: 3m 37s\tremaining: 1h 8m 41s\n",
      "600:\ttest: 0.8435247\tbest: 0.8435247 (600)\ttotal: 7m 4s\tremaining: 1h 3m 34s\n",
      "900:\ttest: 0.8454568\tbest: 0.8454568 (900)\ttotal: 10m 27s\tremaining: 59m 9s\n",
      "1200:\ttest: 0.8466659\tbest: 0.8466659 (1200)\ttotal: 13m 49s\tremaining: 55m 14s\n",
      "1500:\ttest: 0.8475655\tbest: 0.8475655 (1500)\ttotal: 17m 10s\tremaining: 51m 27s\n",
      "1800:\ttest: 0.8482844\tbest: 0.8482844 (1800)\ttotal: 20m 31s\tremaining: 47m 52s\n",
      "2100:\ttest: 0.8488674\tbest: 0.8488701 (2095)\ttotal: 23m 54s\tremaining: 44m 21s\n",
      "2400:\ttest: 0.8494147\tbest: 0.8494147 (2400)\ttotal: 27m 16s\tremaining: 40m 52s\n",
      "2700:\ttest: 0.8496788\tbest: 0.8496788 (2700)\ttotal: 30m 37s\tremaining: 37m 24s\n",
      "3000:\ttest: 0.8500786\tbest: 0.8500786 (3000)\ttotal: 33m 59s\tremaining: 33m 57s\n",
      "3300:\ttest: 0.8504231\tbest: 0.8504242 (3295)\ttotal: 37m 20s\tremaining: 30m 31s\n",
      "3600:\ttest: 0.8507395\tbest: 0.8507439 (3595)\ttotal: 40m 43s\tremaining: 27m 7s\n",
      "3900:\ttest: 0.8511152\tbest: 0.8511152 (3900)\ttotal: 44m 6s\tremaining: 23m 44s\n",
      "4200:\ttest: 0.8513778\tbest: 0.8513778 (4200)\ttotal: 47m 27s\tremaining: 20m 19s\n",
      "4500:\ttest: 0.8516242\tbest: 0.8516249 (4490)\ttotal: 50m 47s\tremaining: 16m 54s\n",
      "4800:\ttest: 0.8518168\tbest: 0.8518215 (4790)\ttotal: 54m 9s\tremaining: 13m 31s\n",
      "5100:\ttest: 0.8519976\tbest: 0.8519996 (5095)\ttotal: 57m 32s\tremaining: 10m 8s\n",
      "5400:\ttest: 0.8521174\tbest: 0.8521404 (5370)\ttotal: 1h 55s\tremaining: 6m 45s\n",
      "5700:\ttest: 0.8522773\tbest: 0.8522773 (5700)\ttotal: 1h 4m 18s\tremaining: 3m 22s\n",
      "5999:\ttest: 0.8524762\tbest: 0.8524783 (5990)\ttotal: 1h 7m 41s\tremaining: 0us\n",
      "bestTest = 0.8524783254\n",
      "bestIteration = 5990\n",
      "Shrink model to first 5991 iterations.\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.850296\n",
      "[400]\tvalid_0's auc: 0.85499\n",
      "[600]\tvalid_0's auc: 0.856244\n",
      "[800]\tvalid_0's auc: 0.856871\n",
      "[1000]\tvalid_0's auc: 0.857054\n",
      "[1200]\tvalid_0's auc: 0.857252\n",
      "Early stopping, best iteration is:\n",
      "[1300]\tvalid_0's auc: 0.857332\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.850132\n",
      "[400]\tvalid_0's auc: 0.854811\n",
      "[600]\tvalid_0's auc: 0.856168\n",
      "[800]\tvalid_0's auc: 0.856674\n",
      "[1000]\tvalid_0's auc: 0.856867\n",
      "Early stopping, best iteration is:\n",
      "[1044]\tvalid_0's auc: 0.856979\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Default metric period is 5 because AUC is/are not implemented for GPU\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6577985\tbest: 0.6577985 (0)\ttotal: 754ms\tremaining: 1h 15m 25s\n",
      "300:\ttest: 0.8380674\tbest: 0.8380674 (300)\ttotal: 3m 26s\tremaining: 1h 5m 6s\n",
      "600:\ttest: 0.8425657\tbest: 0.8425657 (600)\ttotal: 6m 42s\tremaining: 1h 15s\n",
      "900:\ttest: 0.8445190\tbest: 0.8445190 (900)\ttotal: 9m 55s\tremaining: 56m 10s\n",
      "1200:\ttest: 0.8458325\tbest: 0.8458325 (1200)\ttotal: 13m 6s\tremaining: 52m 21s\n",
      "1500:\ttest: 0.8467269\tbest: 0.8467314 (1495)\ttotal: 16m 16s\tremaining: 48m 48s\n",
      "1800:\ttest: 0.8474115\tbest: 0.8474115 (1800)\ttotal: 19m 27s\tremaining: 45m 22s\n",
      "2100:\ttest: 0.8479707\tbest: 0.8479707 (2100)\ttotal: 22m 38s\tremaining: 42m 1s\n",
      "2400:\ttest: 0.8484909\tbest: 0.8484909 (2400)\ttotal: 25m 50s\tremaining: 38m 44s\n",
      "2700:\ttest: 0.8489097\tbest: 0.8489112 (2695)\ttotal: 29m\tremaining: 35m 25s\n",
      "3000:\ttest: 0.8493114\tbest: 0.8493114 (3000)\ttotal: 32m 12s\tremaining: 32m 11s\n",
      "3300:\ttest: 0.8496454\tbest: 0.8496454 (3300)\ttotal: 35m 23s\tremaining: 28m 56s\n",
      "3600:\ttest: 0.8499704\tbest: 0.8499704 (3600)\ttotal: 38m 35s\tremaining: 25m 42s\n",
      "3900:\ttest: 0.8501702\tbest: 0.8501748 (3895)\ttotal: 41m 46s\tremaining: 22m 28s\n",
      "4200:\ttest: 0.8503737\tbest: 0.8503737 (4200)\ttotal: 44m 58s\tremaining: 19m 15s\n",
      "4500:\ttest: 0.8506547\tbest: 0.8506559 (4485)\ttotal: 48m 9s\tremaining: 16m 2s\n",
      "4800:\ttest: 0.8508497\tbest: 0.8508611 (4795)\ttotal: 51m 21s\tremaining: 12m 49s\n",
      "5100:\ttest: 0.8510172\tbest: 0.8510172 (5100)\ttotal: 54m 34s\tremaining: 9m 37s\n",
      "5400:\ttest: 0.8511992\tbest: 0.8511992 (5400)\ttotal: 57m 47s\tremaining: 6m 24s\n",
      "5700:\ttest: 0.8512785\tbest: 0.8512785 (5700)\ttotal: 1h 1m 1s\tremaining: 3m 12s\n",
      "5999:\ttest: 0.8514213\tbest: 0.8514213 (5999)\ttotal: 1h 4m 14s\tremaining: 0us\n",
      "bestTest = 0.8514213264\n",
      "bestIteration = 5999\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.84804\n",
      "[400]\tvalid_0's auc: 0.852686\n",
      "[600]\tvalid_0's auc: 0.854013\n",
      "[800]\tvalid_0's auc: 0.854565\n",
      "[1000]\tvalid_0's auc: 0.854771\n",
      "[1200]\tvalid_0's auc: 0.854943\n",
      "Early stopping, best iteration is:\n",
      "[1209]\tvalid_0's auc: 0.854957\n",
      "Training until validation scores don't improve for 60 rounds\n",
      "[200]\tvalid_0's auc: 0.847397\n",
      "[400]\tvalid_0's auc: 0.851887\n",
      "[600]\tvalid_0's auc: 0.853482\n",
      "[800]\tvalid_0's auc: 0.854071\n",
      "[1000]\tvalid_0's auc: 0.854304\n",
      "Early stopping, best iteration is:\n",
      "[977]\tvalid_0's auc: 0.854324\n"
     ]
    }
   ],
   "source": [
    "fitted_models_cb = []\n",
    "fitted_models_lgb = []\n",
    "fitted_models_lgb2 = []\n",
    "fitted_models_eclf = []\n",
    "cv_scores_cb = []\n",
    "cv_scores_lgb = []\n",
    "cv_scores_lgb2 = []\n",
    "cv_scores_eclf = []\n",
    "\n",
    "for idx_train, idx_valid in cv.split(df_train, y, groups=weeks):#\n",
    "    X_train, y_train = df_train.iloc[idx_train], y.iloc[idx_train]# \n",
    "    X_valid, y_valid = df_train.iloc[idx_valid], y.iloc[idx_valid]\n",
    "    \n",
    "    # CatBoost\n",
    "    train_pool = Pool(X_train, y_train, cat_features=cat_cols)\n",
    "    val_pool = Pool(X_valid, y_valid, cat_features=cat_cols)\n",
    "    clf_cb = CatBoostClassifier(\n",
    "        eval_metric='AUC',\n",
    "        task_type=task_type,\n",
    "        learning_rate=0.05,\n",
    "        iterations=n_est)\n",
    "    random_seed=SEED\n",
    "    clf_cb.fit(train_pool, eval_set=val_pool,verbose=300)\n",
    "    fitted_models_cb.append(clf_cb)\n",
    "    y_pred_valid = clf_cb.predict_proba(X_valid)[:,1]\n",
    "#     auc_score = roc_auc_score(y_valid, y_pred_valid)\n",
    "#     cv_scores_cb.append(auc_score)\n",
    "    \n",
    "    # LGBM用データ変換\n",
    "    X_train[cat_cols] = X_train[cat_cols].astype(\"category\")\n",
    "    X_valid[cat_cols] = X_valid[cat_cols].astype(\"category\")\n",
    "    \n",
    "    # LGBM1\n",
    "    clf_lgb = LGBMClassifier(**params_lgb)\n",
    "    clf_lgb.fit(\n",
    "        X_train, y_train,\n",
    "        eval_set = [(X_valid, y_valid)],\n",
    "        callbacks = [lgb.log_evaluation(200), lgb.early_stopping(60)] )\n",
    "    \n",
    "    fitted_models_lgb.append(clf_lgb)\n",
    "    y_pred_valid = clf_lgb.predict_proba(X_valid)[:,1]\n",
    "#     auc_score = roc_auc_score(y_valid, y_pred_valid)\n",
    "#     cv_scores_lgb.append(auc_score)\n",
    "\n",
    "    # LGBM2\n",
    "    clf_lgb2 = LGBMClassifier(**params_lgb2)\n",
    "    clf_lgb2.fit(\n",
    "        X_train, y_train,\n",
    "        eval_set = [(X_valid, y_valid)],\n",
    "        callbacks = [lgb.log_evaluation(200), lgb.early_stopping(60)] )\n",
    "    \n",
    "    fitted_models_lgb2.append(clf_lgb2)\n",
    "    y_pred_valid = clf_lgb2.predict_proba(X_valid)[:,1]\n",
    "#     auc_score = roc_auc_score(y_valid, y_pred_valid)\n",
    "#     cv_scores_lgb2.append(auc_score)\n",
    " \n",
    "    # 2つのLGBMをアンサンブル\n",
    "    eclf = VotingClassifier(\n",
    "     estimators=[('lgb', clf_lgb), ('lgb2', clf_lgb2)],\n",
    "     voting='soft', weights=[1, 1])   # 1:1の重みで、2つのモデルの予測値の平均を取る\n",
    "    eclf = eclf.fit(X_train, y_train)\n",
    "    fitted_models_eclf.append(eclf)\n",
    "    y_pred_valid = eclf.predict_proba(X_valid)[:,1]\n",
    "#     auc_score = roc_auc_score(y_valid, y_pred_valid)\n",
    "#     cv_scores_eclf.append(auc_score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bbf8bef8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T21:49:34.488904Z",
     "iopub.status.busy": "2024-06-06T21:49:34.488572Z",
     "iopub.status.idle": "2024-06-06T21:49:34.492960Z",
     "shell.execute_reply": "2024-06-06T21:49:34.492072Z"
    },
    "papermill": {
     "duration": 0.032596,
     "end_time": "2024-06-06T21:49:34.494884",
     "exception": false,
     "start_time": "2024-06-06T21:49:34.462288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(\"CatBoost\")   \n",
    "# print(\"CV AUC scores: \", cv_scores_cb)\n",
    "# print(\"Maximum CV AUC score: \", max(cv_scores_cb))\n",
    "# print(\"LightGBM\")\n",
    "# print(\"CV AUC scores: \", cv_scores_lgb)\n",
    "# print(\"Maximum CV AUC score: \", max(cv_scores_lgb))\n",
    "# print(\"LightGBM_goss\")\n",
    "# print(\"CV AUC scores: \", cv_scores_lgb2)\n",
    "# print(\"Maximum CV AUC score: \", max(cv_scores_lgb2))\n",
    "# print(\"Ensemble of LGBM and LGBM_goss\")\n",
    "# print(\"CV AUC scores: \", cv_scores_eclf)\n",
    "# print(\"Maximum CV AUC score: \", max(cv_scores_eclf))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a0c9429",
   "metadata": {
    "papermill": {
     "duration": 0.025072,
     "end_time": "2024-06-06T21:49:34.545338",
     "exception": false,
     "start_time": "2024-06-06T21:49:34.520266",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## モデルの保存"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "31d4e0c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-06T21:49:34.598004Z",
     "iopub.status.busy": "2024-06-06T21:49:34.597659Z",
     "iopub.status.idle": "2024-06-06T21:49:47.871980Z",
     "shell.execute_reply": "2024-06-06T21:49:47.871122Z"
    },
    "papermill": {
     "duration": 13.303184,
     "end_time": "2024-06-06T21:49:47.874243",
     "exception": false,
     "start_time": "2024-06-06T21:49:34.571059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import dill\n",
    "def pickle_dump(obj, path):\n",
    "   # 指定のpathをバイナリ書き込みモードで開く\n",
    "   with open(path, mode=\"wb\") as f:\n",
    "       # objをプロトコルバージョン4を使用してシリアライズし、fに書き込む\n",
    "       dill.dump(obj, f, protocol=4)\n",
    "\n",
    "# CatBoostとLGBMのアンサンブルしたやつを保存\n",
    "for i, model in enumerate(fitted_models_cb):\n",
    "    pickle_dump(model, f'/kaggle/working/cat_fold{i}.model')\n",
    "for i, model in enumerate(fitted_models_eclf):\n",
    "    pickle_dump(model, f'/kaggle/working/eclf_fold{i}.model')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 7921029,
     "sourceId": 50160,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30665,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 36321.636823,
   "end_time": "2024-06-06T21:49:50.792842",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-06T11:44:29.156019",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
